;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name tanks.utils, :imports nil, :requires nil, :uses nil, :defs {log {:protocol-inline nil, :meta {:file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :line 3, :column 7, :end-line 3, :end-column 10, :arglists (quote ([str]))}, :name tanks.utils/log, :variadic false, :file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :end-column 10, :method-params ([str]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3, :end-line 3, :max-fixed-arity 1, :fn-var true, :arglists (quote ([str]))}, contained-in? {:protocol-inline nil, :meta {:file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :line 21, :column 7, :end-line 21, :end-column 20, :arglists (quote ([box p]))}, :name tanks.utils/contained-in?, :variadic false, :file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :end-column 20, :method-params ([box p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([box p]))}, quad-tree {:protocol-inline nil, :meta {:file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :line 6, :column 7, :end-line 6, :end-column 16, :arglists (quote ([max b]))}, :name tanks.utils/quad-tree, :variadic false, :file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :end-column 16, :method-params ([max b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([max b]))}, ->Point {:protocol-inline nil, :meta {:file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :line 19, :column 12, :end-line 19, :end-column 17, :internal-ctor true, :factory :positional, :arglists (quote ([x y]))}, :name tanks.utils/->Point, :variadic false, :file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :end-column 17, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y]))}, can-add? {:protocol-inline nil, :meta {:file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :line 52, :column 7, :end-line 52, :end-column 15, :arglists (quote ([node p]))}, :name tanks.utils/can-add?, :variadic false, :file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :end-column 15, :method-params ([node p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 2, :fn-var true, :arglists (quote ([node p]))}, map->Rect {:protocol-inline nil, :meta {:file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :line 18, :column 12, :end-line 18, :end-column 16, :internal-ctor true, :factory :map, :arglists (quote ([G__22722]))}, :name tanks.utils/map->Rect, :variadic false, :file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :end-column 16, :method-params ([G__22722]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__22722]))}, map->Point {:protocol-inline nil, :meta {:file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :line 19, :column 12, :end-line 19, :end-column 17, :internal-ctor true, :factory :map, :arglists (quote ([G__22730]))}, :name tanks.utils/map->Point, :variadic false, :file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :end-column 17, :method-params ([G__22730]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__22730]))}, find-quadrant {:protocol-inline nil, :meta {:file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :line 55, :column 7, :end-line 55, :end-column 20, :arglists (quote ([node p]))}, :name tanks.utils/find-quadrant, :variadic false, :file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :end-column 20, :method-params ([node p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 2, :fn-var true, :arglists (quote ([node p]))}, directions {:name tanks.utils/directions, :file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :line 16, :column 1, :end-line 16, :end-column 16, :meta {:file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :line 16, :column 6, :end-line 16, :end-column 16}}, in-tree? {:protocol-inline nil, :meta {:file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :line 49, :column 7, :end-line 49, :end-column 15, :arglists (quote ([p tree]))}, :name tanks.utils/in-tree?, :variadic false, :file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :end-column 15, :method-params ([p tree]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p tree]))}, point-in? {:protocol-inline nil, :meta {:file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :line 46, :column 7, :end-line 46, :end-column 16, :arglists (quote ([points p]))}, :name tanks.utils/point-in?, :variadic false, :file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :end-column 16, :method-params ([points p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([points p]))}, sub-divide {:protocol-inline nil, :meta {:file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :line 26, :column 7, :end-line 26, :end-column 17, :arglists (quote ([box]))}, :name tanks.utils/sub-divide, :variadic false, :file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :end-column 17, :method-params ([box]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([box]))}, quad-tree-find {:protocol-inline nil, :meta {:file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :line 38, :column 7, :end-line 38, :end-column 21, :arglists (quote ([quad-tree p]))}, :name tanks.utils/quad-tree-find, :variadic false, :file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :end-column 21, :method-params ([quad-tree p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([quad-tree p]))}, Point {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name tanks.utils/Point, :file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :end-column 17, :type true, :column 12, :internal-ctor true, :line 19, :record true, :end-line 19, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, quad-tree-insert {:protocol-inline nil, :meta {:file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :line 62, :column 7, :end-line 62, :end-column 23, :arglists (quote ([node x y]))}, :name tanks.utils/quad-tree-insert, :variadic false, :file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :end-column 23, :method-params ([node x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 3, :fn-var true, :arglists (quote ([node x y]))}, ->Rect {:protocol-inline nil, :meta {:file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :line 18, :column 12, :end-line 18, :end-column 16, :internal-ctor true, :factory :positional, :arglists (quote ([x y w h]))}, :name tanks.utils/->Rect, :variadic false, :file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :end-column 16, :method-params ([x y w h]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 18, :end-line 18, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x y w h]))}, Rect {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name tanks.utils/Rect, :file "/Users/justinthomas/workspaces/tanks-clj/src-cljs/tanks/utils.cljs", :end-column 16, :type true, :column 12, :internal-ctor true, :line 18, :record true, :end-line 18, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:y x :else y :w :north-west :box :north-east :points :south-west w :south-east :h :max :x h}, :order [:points :max :box :north-east :south-east :south-west :north-west :x :y :w :h x y w h :else]}, :doc nil}